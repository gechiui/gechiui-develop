{"version":3,"file":"wordcount.js","sources":["webpack://gc/webpack/bootstrap","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/defaultSettings.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/index.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/stripConnectors.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/stripHTMLComments.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/stripHTMLEntities.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/stripRemovables.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/stripShortcodes.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/stripSpaces.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/stripTags.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/transposeAstralsToCountableChar.js","webpack://gc/./node_modules/@gechiui/wordcount/build-module/@gechiui/wordcount/src/transposeHTMLEntitiesToCountableChars.js","webpack://gc/external \"lodash\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./node_modules/@gechiui/wordcount/build-module/index.js\");\n","/** @typedef {import('./index').GCWordCountStrategy} GCWordCountStrategy */\n\n/** @typedef {Partial<{type: GCWordCountStrategy, shortcodes: string[]}>} GCWordCountL10n */\n\n/**\n * @typedef GCWordCountSettingsFields\n * @property {RegExp}              HTMLRegExp                        Regular expression that matches HTML tags\n * @property {RegExp}              HTMLcommentRegExp                 Regular expression that matches HTML comments\n * @property {RegExp}              spaceRegExp                       Regular expression that matches spaces in HTML\n * @property {RegExp}              HTMLEntityRegExp                  Regular expression that matches HTML entities\n * @property {RegExp}              connectorRegExp                   Regular expression that matches word connectors, like em-dash\n * @property {RegExp}              removeRegExp                      Regular expression that matches various characters to be removed when counting\n * @property {RegExp}              astralRegExp                      Regular expression that matches astral UTF-16 code points\n * @property {RegExp}              wordsRegExp                       Regular expression that matches words\n * @property {RegExp}              characters_excluding_spacesRegExp Regular expression that matches characters excluding spaces\n * @property {RegExp}              characters_including_spacesRegExp Regular expression that matches characters including spaces\n * @property {RegExp}              shortcodesRegExp                  Regular expression that matches GeChiUI shortcodes\n * @property {string[]}            shortcodes                        List of all shortcodes\n * @property {GCWordCountStrategy} type                              Describes what and how are we counting\n * @property {GCWordCountL10n}     l10n                              Object with human translations\n */\n\n/**\n * Lower-level settings for word counting that can be overridden.\n *\n * @typedef {Partial<GCWordCountSettingsFields>} GCWordCountUserSettings\n */\n\n// Disable reason: JSDoc linter doesn't seem to parse the union (`&`) correctly: https://github.com/jsdoc/jsdoc/issues/1285\n/* eslint-disable jsdoc/valid-types */\n/**\n * Word counting settings that include non-optional values we set if missing\n *\n * @typedef {GCWordCountUserSettings & typeof defaultSettings} GCWordCountDefaultSettings\n */\n/* eslint-enable jsdoc/valid-types */\n\nexport const defaultSettings = {\n\tHTMLRegExp: /<\\/?[a-z][^>]*?>/gi,\n\tHTMLcommentRegExp: /<!--[\\s\\S]*?-->/g,\n\tspaceRegExp: /&nbsp;|&#160;/gi,\n\tHTMLEntityRegExp: /&\\S+?;/g,\n\n\t// \\u2014 = em-dash\n\tconnectorRegExp: /--|\\u2014/g,\n\n\t// Characters to be removed from input text.\n\tremoveRegExp: new RegExp(\n\t\t[\n\t\t\t'[',\n\n\t\t\t// Basic Latin (extract)\n\t\t\t'\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E',\n\n\t\t\t// Latin-1 Supplement (extract)\n\t\t\t'\\u0080-\\u00BF\\u00D7\\u00F7',\n\n\t\t\t/*\n\t\t\t * The following range consists of:\n\t\t\t * General Punctuation\n\t\t\t * Superscripts and Subscripts\n\t\t\t * Currency Symbols\n\t\t\t * Combining Diacritical Marks for Symbols\n\t\t\t * Letterlike Symbols\n\t\t\t * Number Forms\n\t\t\t * Arrows\n\t\t\t * Mathematical Operators\n\t\t\t * Miscellaneous Technical\n\t\t\t * Control Pictures\n\t\t\t * Optical Character Recognition\n\t\t\t * Enclosed Alphanumerics\n\t\t\t * Box Drawing\n\t\t\t * Block Elements\n\t\t\t * Geometric Shapes\n\t\t\t * Miscellaneous Symbols\n\t\t\t * Dingbats\n\t\t\t * Miscellaneous Mathematical Symbols-A\n\t\t\t * Supplemental Arrows-A\n\t\t\t * Braille Patterns\n\t\t\t * Supplemental Arrows-B\n\t\t\t * Miscellaneous Mathematical Symbols-B\n\t\t\t * Supplemental Mathematical Operators\n\t\t\t * Miscellaneous Symbols and Arrows\n\t\t\t */\n\t\t\t'\\u2000-\\u2BFF',\n\n\t\t\t// Supplemental Punctuation\n\t\t\t'\\u2E00-\\u2E7F',\n\t\t\t']',\n\t\t].join( '' ),\n\t\t'g'\n\t),\n\n\t// Remove UTF-16 surrogate points, see https://en.wikipedia.org/wiki/UTF-16#U.2BD800_to_U.2BDFFF\n\tastralRegExp: /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n\twordsRegExp: /\\S\\s+/g,\n\tcharacters_excluding_spacesRegExp: /\\S/g,\n\n\t/*\n\t * Match anything that is not a formatting character, excluding:\n\t * \\f = form feed\n\t * \\n = new line\n\t * \\r = carriage return\n\t * \\t = tab\n\t * \\v = vertical tab\n\t * \\u00AD = soft hyphen\n\t * \\u2028 = line separator\n\t * \\u2029 = paragraph separator\n\t */\n\tcharacters_including_spacesRegExp: /[^\\f\\n\\r\\t\\v\\u00AD\\u2028\\u2029]/g,\n\tl10n: {\n\t\ttype: 'words',\n\t},\n};\n","/**\n * External dependencies\n */\nimport { extend, flow } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { defaultSettings } from './defaultSettings';\nimport stripTags from './stripTags';\nimport transposeAstralsToCountableChar from './transposeAstralsToCountableChar';\nimport stripHTMLEntities from './stripHTMLEntities';\nimport stripConnectors from './stripConnectors';\nimport stripRemovables from './stripRemovables';\nimport stripHTMLComments from './stripHTMLComments';\nimport stripShortcodes from './stripShortcodes';\nimport stripSpaces from './stripSpaces';\nimport transposeHTMLEntitiesToCountableChars from './transposeHTMLEntitiesToCountableChars';\n\n/**\n * @typedef {import('./defaultSettings').GCWordCountDefaultSettings}  GCWordCountSettings\n * @typedef {import('./defaultSettings').GCWordCountUserSettings}     GCWordCountUserSettings\n */\n\n/**\n * Possible ways of counting.\n *\n * @typedef {'words'|'characters_excluding_spaces'|'characters_including_spaces'} GCWordCountStrategy\n */\n\n/**\n * Private function to manage the settings.\n *\n * @param {GCWordCountStrategy}     type         The type of count to be done.\n * @param {GCWordCountUserSettings} userSettings Custom settings for the count.\n *\n * @return {GCWordCountSettings} The combined settings object to be used.\n */\nfunction loadSettings( type, userSettings ) {\n\tconst settings = extend( {}, defaultSettings, userSettings );\n\n\tsettings.shortcodes = settings.l10n?.shortcodes ?? [];\n\n\tif ( settings.shortcodes && settings.shortcodes.length ) {\n\t\tsettings.shortcodesRegExp = new RegExp(\n\t\t\t'\\\\[\\\\/?(?:' + settings.shortcodes.join( '|' ) + ')[^\\\\]]*?\\\\]',\n\t\t\t'g'\n\t\t);\n\t}\n\n\tsettings.type = type;\n\n\tif (\n\t\tsettings.type !== 'characters_excluding_spaces' &&\n\t\tsettings.type !== 'characters_including_spaces'\n\t) {\n\t\tsettings.type = 'words';\n\t}\n\n\treturn settings;\n}\n\n/**\n * Count the words in text\n *\n * @param {string}              text     The text being processed\n * @param {RegExp}              regex    The regular expression pattern being matched\n * @param {GCWordCountSettings} settings Settings object containing regular expressions for each strip function\n *\n * @return {number} Count of words.\n */\nfunction countWords( text, regex, settings ) {\n\ttext = flow(\n\t\tstripTags.bind( null, settings ),\n\t\tstripHTMLComments.bind( null, settings ),\n\t\tstripShortcodes.bind( null, settings ),\n\t\tstripSpaces.bind( null, settings ),\n\t\tstripHTMLEntities.bind( null, settings ),\n\t\tstripConnectors.bind( null, settings ),\n\t\tstripRemovables.bind( null, settings )\n\t)( text );\n\ttext = text + '\\n';\n\treturn text.match( regex )?.length ?? 0;\n}\n\n/**\n * Count the characters in text\n *\n * @param {string}              text     The text being processed\n * @param {RegExp}              regex    The regular expression pattern being matched\n * @param {GCWordCountSettings} settings Settings object containing regular expressions for each strip function\n *\n * @return {number} Count of characters.\n */\nfunction countCharacters( text, regex, settings ) {\n\ttext = flow(\n\t\tstripTags.bind( null, settings ),\n\t\tstripHTMLComments.bind( null, settings ),\n\t\tstripShortcodes.bind( null, settings ),\n\t\ttransposeAstralsToCountableChar.bind( null, settings ),\n\t\tstripSpaces.bind( null, settings ),\n\t\ttransposeHTMLEntitiesToCountableChars.bind( null, settings )\n\t)( text );\n\ttext = text + '\\n';\n\treturn text.match( regex )?.length ?? 0;\n}\n\n/**\n * Count some words.\n *\n * @param {string}                  text         The text being processed\n * @param {GCWordCountStrategy}     type         The type of count. Accepts 'words', 'characters_excluding_spaces', or 'characters_including_spaces'.\n * @param {GCWordCountUserSettings} userSettings Custom settings object.\n *\n * @example\n * ```js\n * import { count } from '@gechiui/wordcount';\n * const numberOfWords = count( 'Words to count', 'words', {} )\n * ```\n *\n * @return {number} The word or character count.\n */\nexport function count( text, type, userSettings ) {\n\tconst settings = loadSettings( type, userSettings );\n\tlet matchRegExp;\n\tswitch ( settings.type ) {\n\t\tcase 'words':\n\t\t\tmatchRegExp = settings.wordsRegExp;\n\t\t\treturn countWords( text, matchRegExp, settings );\n\t\tcase 'characters_including_spaces':\n\t\t\tmatchRegExp = settings.characters_including_spacesRegExp;\n\t\t\treturn countCharacters( text, matchRegExp, settings );\n\t\tcase 'characters_excluding_spaces':\n\t\t\tmatchRegExp = settings.characters_excluding_spacesRegExp;\n\t\t\treturn countCharacters( text, matchRegExp, settings );\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n}\n","/**\n * Replaces items matched in the regex with spaces.\n *\n * @param {import('./index').GCWordCountSettings} settings The main settings object containing regular expressions\n * @param {string}                                text     The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripConnectors( settings, text ) {\n\treturn text.replace( settings.connectorRegExp, ' ' );\n}\n","/**\n * Removes items matched in the regex.\n *\n * @param {import('./index').GCWordCountSettings} settings The main settings object containing regular expressions\n * @param {string}                                text     The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripHTMLComments( settings, text ) {\n\treturn text.replace( settings.HTMLcommentRegExp, '' );\n}\n","/**\n * Removes items matched in the regex.\n *\n * @param {import('./index').GCWordCountSettings} settings The main settings object containing regular expressions\n * @param {string}                                text     The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripHTMLEntities( settings, text ) {\n\treturn text.replace( settings.HTMLEntityRegExp, '' );\n}\n","/**\n * Removes items matched in the regex.\n *\n * @param {import('./index').GCWordCountSettings} settings The main settings object containing regular expressions\n * @param {string}                                text     The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripRemovables( settings, text ) {\n\treturn text.replace( settings.removeRegExp, '' );\n}\n","/**\n * Replaces items matched in the regex with a new line.\n *\n * @param {import('./index').GCWordCountSettings} settings The main settings object containing regular expressions\n * @param {string}                                text     The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripShortcodes( settings, text ) {\n\tif ( settings.shortcodesRegExp ) {\n\t\treturn text.replace( settings.shortcodesRegExp, '\\n' );\n\t}\n\treturn text;\n}\n","/**\n * Replaces items matched in the regex with spaces.\n *\n * @param {import('./index').GCWordCountSettings} settings The main settings object containing regular expressions\n * @param {string}                                text     The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripSpaces( settings, text ) {\n\treturn text.replace( settings.spaceRegExp, ' ' );\n}\n","/**\n * Replaces items matched in the regex with new line\n *\n * @param {import('./index').GCWordCountSettings} settings The main settings object containing regular expressions\n * @param {string}                                text     The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripTags( settings, text ) {\n\treturn text.replace( settings.HTMLRegExp, '\\n' );\n}\n","/**\n * Replaces items matched in the regex with character.\n *\n * @param {import('./index').GCWordCountSettings} settings The main settings object containing regular expressions\n * @param {string}                                text     The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function transposeAstralsToCountableChar( settings, text ) {\n\treturn text.replace( settings.astralRegExp, 'a' );\n}\n","/**\n * Replaces items matched in the regex with a single character.\n *\n * @param {import('./index').GCWordCountSettings} settings The main settings object containing regular expressions\n * @param {string}                                text     The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function transposeHTMLEntitiesToCountableChars(\n\tsettings,\n\ttext\n) {\n\treturn text.replace( settings.HTMLEntityRegExp, 'a' );\n}\n","(function() { module.exports = window[\"lodash\"]; }());"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAzEA;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AAAA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAXA;AAaA;;;;;;;;;;;;;AC1IA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;ACbA;;;;A","sourceRoot":""}